import fs from 'fs';

const toMathematicalAlphanumericSymbols = text => {
  const map = {
    'A': 'ùë®', 'B': 'ùë©', 'C': 'ùë™', 'D': 'ùë´', 'E': 'ùë¨', 'F': 'ùë≠', 'G': 'ùëÆ', 'H': 'ùëØ', 'I': 'ùë∞', 'J': 'ùë±',
    'K': 'ùë≤', 'L': 'ùë≥', 'M': 'ùë¥', 'N': 'ùëµ', 'O': 'ùë∂', 'P': 'ùë∑', 'Q': 'ùë∏', 'R': 'ùëπ', 'S': 'ùë∫', 'T': 'ùëª',
    'U': 'ùëº', 'V': 'ùëΩ', 'W': 'ùëæ', 'X': 'ùëø', 'Y': 'ùíÄ', 'Z': 'ùíÅ'
  };
  return text.split('').map(char => map[char] || char).join('');
};

let handler = m => m;

handler.all = async function (m) {
  if (!m.text) return;

  // Verifica se √® una delle menzioni previste
  if (/^@393755853799$/i.test(m.text)) {
    if (m.sender === global.conn.user.jid) return;

    // Caricamento immagine
    let image;
    try {
      image = fs.readFileSync('./icone/instagram.png');
    } catch (err) {
      console.error("Errore nel caricamento dell'immagine:", err);
      return global.conn.sendMessage(
        m.chat,
        { text: "‚ùå Errore nel caricamento dell'immagine." },
        { quoted: m }
      );
    }

    // Messaggio con vCard e immagine thumbnail
    let quotedContact = {
      key: { participants: "0@s.whatsapp.net", fromMe: false, id: "Halo" },
      message: {
        locationMessage: {
          name: toMathematicalAlphanumericSymbols("INSTAGRAM OWNER"),
          jpegThumbnail: image,
          vcard: `BEGIN:VCARD\nVERSION:3.0\nN:Sy;Bot;;;\nFN:y\nitem1.TEL;waid=${m.sender.split('@')[0]}:${m.sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`
        }
      },
      participant: "0@s.whatsapp.net"
    };

    // Risposta principale
    await global.conn.sendMessage(
      m.chat,
      {
        text: `üîó *Instagram:* https://instagram.com/f.cesco_\n\nüì© *al momento cesco non c'√® appena torna forse ti risponde*
      },
      { quoted: quotedContact }
    );
  }
  return !0;
};

export default handler;
